{
  "code": "#include<iostream> \n#include<math.h> \nusing namespace std; \n\nint a[10][10], b[10][10], mult[10][10], r1, c1, r2, c2, i, j, k; \nfloat x, y, z; \nfloat fact(float); \nvoid basic(); \nvoid sin(); \nvoid MATRIX(); \nvoid MATRIX2(); \nvoid DETERMINENT(); \nvoid QUAD(); \nvoid convert(); \nvoid table(); \nvoid prime(); \nvoid Febo(); \nvoid armst(); \nvoid facto(); \nvoid addition(float, float); \nvoid subtraction(float, float); \nvoid division(float, float); \nvoid multiplication(float, float); \nvoid addition(); \nvoid multiplication(); \nint A[3][3]; \nint B[3][3]; \nint multi[3][3]; \nint elementadd[3][3]; \nint elementmulti[3][3]; \n\nint main() \n{ \n    int num; \n    cout << \"Welcome to our Scientific Calculator programme \" << endl << endl << \"\\t\"; \n    cout << \"Please chose from below operations :: \" << endl << endl; \n    cout << \"Press 1 to do the Basic claculations \" << endl; \n    cout << \"Press 2 to find value of sinx \" << endl; \n    cout << \"Press 3 to find value of cosx \" << endl; \n    cout << \"Press 4 to find value of tanx \" << endl; \n    cout << \"Press 5 to find value of logx \" << endl; \n    cout << \"Press 6 for finding value of a^x (exponential function) \" << endl; \n    cout << \"Press 7 for finding value of square root of x (x^1/2) \" << endl << endl; \n    cout << \"Press 8 for Summation of two Matrix of order 3x3 \" << endl << endl; \n    cout << \"Press 9 for multiplication of two Matrix of order 3x3 \" << endl << endl; \n    // cout << \"Enter 10 to find the Determinent of Matrix \" << endl; \n    cout << \"Enter 11 for solving a quadratic equation and finding its root \" << endl; \n    cout << \"ENter 12 for conversions \" << endl; \n    cout << \"Enter 13 to print the table of a number upto the number you want \" << endl; \n    cout << \"Enter 14 to Check whether a number is prime or not \" << endl; \n    cout << \"Enter 15 to print Febonaci series upto n terms \" << endl; \n    cout << \"Enter 16 to Check whether a number is armstrong or not \" << endl; \n    cout << \"Enter 17 to get factorial of a number \" << endl; \n    cin >> num; \n    switch (num) \n    { \n    case 1: \n        { \n            basic(); \n            break; \n        } \n\n    case 2: \n        { \n            sin(); \n            break; \n        } \n    case 3: \n        { \n            cout << \"Enter the value of x in degree \" << endl; \n            cin >> x; \n            double y = x * 3.14 / 180; \n            cout << \"Cosine of an angle is :\" << cos(y); \n\n            break; \n        } \n    case 4: \n        { \n            cout << \"Enter the value of x in degree \" << endl; \n            cin >> x; \n            double y = x * 3.14 / 180; \n            cout << \"Cosine of an angle is :\" << tan(y); \n            break; \n        } \n    case 5: \n        { \n            cout << \"Enter the value of x \" << endl; \n            cin >> x; \n            double y = x; \n            cout << \"the value of natural log\" << x << \" is \" << log(y); \n            break; \n        } \n    case 6: \n        { \n            cout << \"Enter the value of base \" << endl; \n            cin >> x; \n            cout << \"Enter the value of Exponent \" << endl; \n            cin >> y; \n            cout << \"The value of \" << x << \"^\" << y << \" is :\" << pow(x, y); \n            break; \n        } \n    case 7: \n        { \n            cout << \"Enter the value of X \" << endl; \n            cin >> x; \n            cout << \"The value of square root of x is : \" << sqrt(x); \n            break; \n        } \n    case 8: \n        { \n            MATRIX(); \n            break; \n        } \n    case 9: \n        { \n            MATRIX2(); \n            break; \n        } \n        // case 10:{DETERMINENT();break ;} \n    case 11: \n        { \n            QUAD(); \n            break; \n        } \n    case 12: \n        { \n            convert(); \n            break; \n        } \n    case 13: \n        { \n            table(); \n            break; \n        } \n    case 14: \n        { \n            prime(); \n            break; \n        } \n    case 15: \n        { \n            Febo(); \n            break; \n        } \n    case 16: \n        { \n            armst(); \n            break; \n        } \n    case 17: \n        { \n            facto(); \n            break; \n        } \n    } \n\n} \n\nvoid basic() \n{ \n\n\n    cout <<\"enter a=\"; \n    cin >> x; \n    cout << \"enter b=\"; \n    cin >> y; \n    cout << \"enter 1=addition 2=subtraction 3=division 4=multiplication\" << endl; \n    cin >> z; \n    if (z == 1) \n    { \n        addition(x, y); \n    } \n    else \n        if (z == 2) \n    { \n        subtraction(x, y); \n    } \n    else if (z == 3) \n    { \n        division(x, y); \n    } \n    else if (z == 4) \n    { \n        multiplication(x, y); \n    } \n    else \n        cout << \"enter valid number\" << endl; \n\n} \nvoid addition(float a, float b) \n{ \n    float m; \n    m = a + b; \n    cout << \"ans=\" << m; \n} \nvoid subtraction(float c, float d) \n{ \n    float n; \n    n = c - d; \n    cout << \"ans=\" << n; \n} \nvoid division(float e, float f) \n{ \n    float o; \n    o = e / f; \n    cout << \"ans=\" << o; \n} \nvoid multiplication(float g, float h) \n{ \n    float p; \n    p = g * h; \n    cout << \"ans=\" << p; \n}\n\nvoid sin() \n{ \n    float a, b, f, e, x, y; \n    float num[10]; \n    float digi = 0; \n    cout << \"Enter value of x in degree\" << endl; \n    cin >> y; \n    x = y * (3.14 / 180); \n\n    for (int i = 0; i < 10; i++) \n    { \n        a = pow(-1, i); \n        b = (2 * i) + 1; \n        f = fact(b); \n        e = pow(x, b); \n        num[i] = (a / f) * e; \n        digi = digi + num[i]; \n    } \n    cout << \" The approx value of sin\" << y << \" is = \" << digi; \n} \n\nfloat fact(float b) \n{ \n    int g = 1; \n    for (int i = 1; i <= b; ++i) \n    { \n\n        g *= i; \n    }\n\n    return (g); \n}\n\nvoid MATRIX() \n{ \n\n    cout << \"Enter the elements of matrix A\" << endl; \n\n    for (int i = 0; i < 3; i++) \n    { \n        for (int j = 0; j < 3; j++) \n        { \n            cout << \" Enter element  \" << \"A\" << i + 1 << j + 1 << endl; \n            cin >> A[i][j]; \n        }\n\n    }\n\n    cout << \" The Matrix A is \" << endl;\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << \"\\t\";\n        for (int j = 0; j < 3; j++)\n        {\n            cout << A[i][j] << \"\\t\";\n\n        }\n        cout << \"\\n\";\n\n    }\n\n    cout << \"Enter the elements of matrix A\" << endl;\n\n    for (int i = 0; i < 3; i++)\n    {\n        for (int j = 0; j < 3; j++)\n        {\n            cout << \" Enter element  \" << \"B\" << i + 1 << j + 1 << endl;\n            cin >> B[i][j];\n        }\n\n    }\n\n    cout << \" The Matrix B is \" << endl;\n\n    for (int i = 0; i < 3; i++)\n    {\n        cout << \"\\t\";\n        for (int j = 0; j < 3; j++)\n        {\n            cout << B[i][j] << \"\\t\";\n\n        }\n        cout << \"\\n\";\n\n    }\n\n    cout << \" The summation of Matrix is \" << endl;\n    for (int i = 0; i < 3; i++)\n    {\n        for (int j = 0; j < 3; j++)\n        {\n\n            elementadd[i][j] = A[i][j] + B[i][j];\n        }\n    }\n    for (int i = 0; i < 3; i++)\n    {\n        cout << \"\\t\";\n        for (int j = 0; j < 3; j++)\n        {\n            cout << elementadd[i][j] << \"\\t\";\n        }\n        cout << \"\\n\";\n    }\n}\n\nvoid MATRIX2() \n{ \n    int first[3][3]; \n    int second[3][3]; \n    int result[3][3]; \n    cout << endl << \"Input Matrix a\" << \"\\n\\n\"; \n    for (int i = 0; i < 3; ++i) \n    { \n        for (int j = 0; j < 3; ++j) \n        { \n            cout << \"Enter a\" << i + 1 << j + 1 << \" :\\t \"; \n            cin >> first[i][j]; \n        } \n    } \n    cout << endl << \"Input Matrix b\" << \"\\n\\n\"; \n    for (int i = 0; i < 3; ++i) \n    { \n        for (int j = 0; j < 3; ++j) \n        { \n            cout << \"Enter b \" << i + 1 << j + 1 << \" :\\t \"; \n            cin >> second[i][j]; \n        } \n    } \n    cout << \"Entered Matrix a and b\" << \"\\n\\n\"; \n    for (int i = 0; i < 3; ++i) \n    { \n        for (int j = 0; j < 3; ++j) \n        { \n            cout << first[i][j] << \" \"; \n        } \n        cout << \"\\t\"; \n        for (int j = 0; j < 3; ++j) \n        { \n            cout << second[i][j] << \" \"; \n        } \n        cout << endl; \n    } \n    for (int i = 0; i < 3; ++i) \n    { \n        for (int j = 0; j < 3; ++j) \n        { \n            int sum = 0; \n            for (int k = 0; k < 3; ++k) \n            { \n                sum += first[i][k] * second[k][j]; \n            } \n            result[i][j] = sum; \n        } \n    } \n    cout << endl << \"Resultant Matrix \" << \"\\n\\n\"; \n    for (int i = 0; i < 3; ++i) \n    { \n        for (int j = 0; j < 3; ++j) \n        { \n            cout << \" \" << result[i][j]; \n        } \n        cout << endl; \n    } \n} \n\nvoid DETERMINENT() \n{ \n} \nvoid QUAD() \n{ \n    float a, b, c, x1, x2, discriminant, realPart, imaginaryPart; \n    cout << \"Enter coefficients a, b and c: \"; \n    cin >> a >> b >> c; \n    discriminant = b * b - 4 * a * c; \n\n    if (discriminant > 0) \n    { \n        x1 = (-b + sqrt(discriminant)) / (2 * a); \n        x2 = (-b - sqrt(discriminant)) / (2 * a); \n        cout << \"Roots are real and different.\" << endl; \n        cout << \"x1 = \" << x1 << endl; \n        cout << \"x2 = \" << x2 << endl; \n    } \n\n    else if (discriminant == 0) \n    { \n        cout << \"Roots are real and same.\" << endl; \n        x1 = -b / (2 * a); \n        cout << \"x1 = x2 =\" << x1 << endl; \n    }\n\n    else \n    { \n        realPart = -b / (2 * a); \n        imaginaryPart = sqrt(-discriminant) / (2 * a); \n        cout << \"Roots are complex and different.\" << endl; \n        cout << \"x1 = \" << realPart << \"+\" << imaginaryPart << \"i\" << endl; \n        cout << \"x2 = \" << realPart << \"-\" << imaginaryPart << \"i\" << endl; \n    } \n} \nvoid convert() \n{ \n    int K; \n    cout << \" Press the following for respectivr conversion \" << endl; \n    cout << \" Press 1 for converting degree celcius to fehrenhite \" << endl; \n    cout << \" Press 2 for conversion of Joule to electron volt \" << endl; \n    cin >> K; \n    switch (K) \n    { \n    case 1: \n    { \n        float fahrenheit, celsius; \n        cout << \"Enter the temperature in Celsius : \"; \n        cin >> celsius; \n        fahrenheit = (celsius * 9.0) / 5.0 + 32; \n        cout << \"The temperature in Celsius : \" << celsius << endl; \n        cout << \"The temperature in Fahrenheit : \" << fahrenheit << endl; \n    } \n    case 2: \n    { \n        long joule, evolt; \n        cout << \" Enter the value in joules \" << endl; \n        cin >> joule; \n        evolt = (joule / 1.6) * pow(10, -19); \n        cout << \" The value in electrone volt is : \" << evolt; \n    } \n    } \n\n} \n\nvoid table() \n{ \n    int a, b, c, i, e; \n    cout << \"Enter number you want table of\" << endl; \n    cin >> b; \n    cout << \"Enter number upto which you want table\" << endl; \n    cin >> e; \n    a = 1; \n    while (a <= e) \n    { \n        c = a * b; \n        cout << a << \"*\" << b << \"=\" << c << endl; \n        a++; \n    } \n\n} \nvoid prime() \n{ \n    int x, j, c; \n    cout << \"Enter a number to check whether it is prime or not\" << endl; \n    cin >> x; \n    c = 0; \n    for (j = 1; j <= x; j++) \n    { \n        if (x % j == 0) \n        { \n            c++; \n        } \n    } \n    if (c == 2) \n    { \n        cout << \"prime\" << endl; \n    } \n    else \n    { \n        cout << \"not prime\" << endl; \n    } \n} \n\nvoid Febo() \n{ \n    int a, b, c, d, n; \n    a = 0; \n    b = 1; \n    cout << \"Enter the number of terms you want in fibonacci series\" << endl; \n    cin >> n; \n    cout << a << \"\\t\" << b << \"\\t\"; \n    d = 2; \n    while (d < n) \n    { \n        c = a + b; \n        cout << c << \"\\t\"; \n        a = b; \n        b = c; \n        d++; \n    } \n\n} \nvoid armst() \n{ \n    int n, r, sum = 0, temp; \n    cout << \"Enter a number: \"; \n    cin >> n; \n    temp = n; \n    while (n > 0) \n    { \n        r = n % 10; \n        sum = sum + (r * r * r); \n        n = n / 10; \n    } \n    if (temp == sum) \n        cout << temp << \" is an Armstrong number.\" << endl; \n    else \n        cout << temp << \" is not an Armstrong number.\" << endl; \n} \nvoid facto() \n{ \n    int i, n; \n    unsigned long long fact = 1; \n    cout << \"Enter a positive integer: \"; \n    cin >> n; \n    for (i = 1; i <= n; ++i) \n    { \n        fact *= i; \n    } \n    cout << \"Factorial of \" << n << \" = \" << fact; \n} \n\n\n"
}
